// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

var encodings = require('hrpc-runtime/encodings')
var varint = encodings.varint
var skip = encodings.skip

var MirrorRequest = exports.MirrorRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var MirrorStatus = exports.MirrorStatus = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var ListResponse = exports.ListResponse = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var RPCError = exports.RPCError = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineMirrorRequest()
defineMirrorStatus()
defineListResponse()
defineRPCError()

function defineMirrorRequest () {
  MirrorRequest.encodingLength = encodingLength
  MirrorRequest.encode = encode
  MirrorRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = encodings.bytes.encodingLength(obj.key)
    length += 1 + len
    if (defined(obj.type)) {
      var len = encodings.string.encodingLength(obj.type)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 10
    encodings.bytes.encode(obj.key, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (defined(obj.type)) {
      buf[offset++] = 18
      encodings.string.encode(obj.type, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: null,
      type: ""
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found0 = true
        break
        case 2:
        obj.type = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineMirrorStatus () {
  MirrorStatus.encodingLength = encodingLength
  MirrorStatus.encode = encode
  MirrorStatus.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = encodings.bytes.encodingLength(obj.key)
    length += 1 + len
    if (!defined(obj.type)) throw new Error("type is required")
    var len = encodings.string.encodingLength(obj.type)
    length += 1 + len
    if (!defined(obj.mirroring)) throw new Error("mirroring is required")
    var len = encodings.bool.encodingLength(obj.mirroring)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 10
    encodings.bytes.encode(obj.key, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.type)) throw new Error("type is required")
    buf[offset++] = 18
    encodings.string.encode(obj.type, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.mirroring)) throw new Error("mirroring is required")
    buf[offset++] = 24
    encodings.bool.encode(obj.mirroring, buf, offset)
    offset += encodings.bool.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: null,
      type: "",
      mirroring: false
    }
    var found0 = false
    var found1 = false
    var found2 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found0 = true
        break
        case 2:
        obj.type = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found1 = true
        break
        case 3:
        obj.mirroring = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        found2 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineListResponse () {
  ListResponse.encodingLength = encodingLength
  ListResponse.encode = encode
  ListResponse.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.mirroring)) {
      for (var i = 0; i < obj.mirroring.length; i++) {
        if (!defined(obj.mirroring[i])) continue
        var len = MirrorStatus.encodingLength(obj.mirroring[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.mirroring)) {
      for (var i = 0; i < obj.mirroring.length; i++) {
        if (!defined(obj.mirroring[i])) continue
        buf[offset++] = 10
        varint.encode(MirrorStatus.encodingLength(obj.mirroring[i]), buf, offset)
        offset += varint.encode.bytes
        MirrorStatus.encode(obj.mirroring[i], buf, offset)
        offset += MirrorStatus.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      mirroring: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.mirroring.push(MirrorStatus.decode(buf, offset, offset + len))
        offset += MirrorStatus.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineRPCError () {
  RPCError.encodingLength = encodingLength
  RPCError.encode = encode
  RPCError.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.message)) throw new Error("message is required")
    var len = encodings.string.encodingLength(obj.message)
    length += 1 + len
    if (defined(obj.code)) {
      var len = encodings.string.encodingLength(obj.code)
      length += 1 + len
    }
    if (defined(obj.errno)) {
      var len = encodings.int32.encodingLength(obj.errno)
      length += 1 + len
    }
    if (defined(obj.details)) {
      var len = encodings.string.encodingLength(obj.details)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.message)) throw new Error("message is required")
    buf[offset++] = 10
    encodings.string.encode(obj.message, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.code)) {
      buf[offset++] = 18
      encodings.string.encode(obj.code, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.errno)) {
      buf[offset++] = 24
      encodings.int32.encode(obj.errno, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    if (defined(obj.details)) {
      buf[offset++] = 34
      encodings.string.encode(obj.details, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      message: "",
      code: "",
      errno: 0,
      details: ""
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.message = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        obj.code = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.errno = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        case 4:
        obj.details = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
